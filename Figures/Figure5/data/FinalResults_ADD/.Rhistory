p <- p + theme(legend.title = element_blank())
p <- p + theme(legend.key.size =  unit(.5, "in"))
#p <- p + theme(plot.background = element_rect(fill = 'grey98', colour = 'black'))
p <- p + theme(legend.background = element_rect(colour = 'black'))
# Chunk 11: figure1e
plot(p)
# Chunk 12: copy
file.copy('D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\Figures\\Rscripts\\Figures1_files\\figure-html\\figure1a-1.pdf','D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\JASA_REVISION\\', overwrite = TRUE)
file.copy('D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\Figures\\Rscripts\\Figures1_files\\figure-html\\figure1b-1.pdf','D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\JASA_REVISION\\', overwrite = TRUE)
file.copy('D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\Figures\\Rscripts\\Figures1_files\\figure-html\\figure1c-1.pdf','D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\JASA_REVISION\\', overwrite = TRUE)
file.copy('D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\Figures\\Rscripts\\Figures1_files\\figure-html\\figure1d-1.pdf','D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\JASA_REVISION\\', overwrite = TRUE)
file.copy('D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\Figures\\Rscripts\\Figures1_files\\figure-html\\figure1e-1.pdf','D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\JASA_REVISION\\', overwrite = TRUE)
# Chunk 1: settings
rm(list=ls())
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, message = FALSE, warning = FALSE, cache = TRUE, fig = TRUE, global.par = TRUE, dev = 'pdf')
#, dev = 'pdf'
options(width  = 100)
options(scipen = 999)
# Load libraries
library(data.table)
library(ggplot2)
library(reshape2)
library(dplyr)
library(GGally)
library(PerformanceAnalytics)
library(mlbench)
library(caret)
library(glmnet)
library(Hmisc)
library(randomForest)
library(discretization)
# Make sure functions from dplyr are acting as functions from dplyr
filter    <- dplyr::filter
mutate    <- dplyr::mutate
group_by  <- dplyr::group_by
summarize <- dplyr::summarize
select    <- dplyr::select
# Define project directory path
# Chunk 2: aa
#############################################################################################
library(Hmisc)
library(dplyr)
library(ggplot2)
#------------------------------------------------------------------------------------
path1 <- "D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\Figures\\Figure2\\Data_a\\";
path2 <- "D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\Figures\\Figure2\\Data_b\\";
path3 <- "D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\Figures\\Figure2\\Data_c\\";
k     <- matrix(c(3, 25, 50, 75, 100, 125, 150, 175, 200, 225, 250), 11, 1);
yMAX  <- 0.4;
iter  <- 300;
name1 <- "3-el. groups"
name2 <- "4-el. groups"
name3 <- "5-el. groups"
name4 <- "6-el. groups"
name5 <- "7-el. groups"
col1  <- "tomato2";
col2  <- "blue";
col3  <- "darkgreen";
col4  <- "black";
col5  <- "orange";
setwd(path1)
PROP   <- read.table("PROP_TRUE_01_MEAN_WEAK.txt");
prop1  <- PROP[,1];
prop2  <- PROP[,2];
prop3  <- PROP[,3];
prop4  <- PROP[,4];
prop5  <- PROP[,5];
estim    <- c(prop1, prop2, prop3, prop4, prop5)
names    <- c(rep(name1, times = length(k)), rep(name2, times = length(k)), rep(name3, times = length(k)), rep(name4, times = length(k)), rep(name5, times = length(k))    )
sparsity <- rep(k,times = 5)
#--------------------------------------
df       <- data.frame("fraction"= estim, sparsity, names)
#--------------------------------------
p <- ggplot(df, aes(sparsity, fraction, colour= names))
p <- p + geom_line(mapping = aes(x = sparsity, y = fraction, color = names, fill = names), size = 1, linetype = 1, cex=1)
p <- p + geom_point(df, mapping=aes(x = sparsity, y = fraction, shape = names, fill=names), size = 5)
p <- p + scale_color_manual(values=c("red", "blue", "chartreuse3", "darkgoldenrod3", "blueviolet"))
p <- p + scale_shape_manual(values = c(21 ,22 ,23 ,24 ,25 ))
p <- p + scale_fill_manual(values = c("red", "blue", "chartreuse3", "darkgoldenrod3", "blueviolet"))
p <- p + coord_cartesian( xlim = c(k[1],  k[length(k)]),  ylim = c(0, 0.42) )
p <- p + labs(title="", x = 'Number of relevant groups', y = 'Fraction of groups in STRG')
p <- p + theme_bw(base_size = 35)
p <- p + theme( legend.position = c(.97, .97), legend.justification = c("right", "top"), legend.box.background = element_rect())
p <- p + theme(legend.text=element_text(size=25))
p <- p + theme(legend.title = element_blank())
p <- p + theme(legend.key.size =  unit(.4, "in"))
p <- p + theme(legend.key = element_rect(size = 10))#, legend.key.size = unit(1.5, 'lines'))
#p <- p + theme(plot.background = element_rect(fill = 'grey98', colour = 'black'))
p <- p + theme(legend.background = element_rect(colour = 'black'))
print("a")
# Chunk 3: figure2a
plot(p)
print("c")
# Chunk 4: bb
setwd(path2)
PROP   <- read.table("PROP_TRUE_01_MEAN_WEAK.txt");
prop1  <- PROP[,1];
prop2  <- PROP[,2];
prop3  <- PROP[,3];
prop4  <- PROP[,4];
prop5  <- PROP[,5];
estim    <- c(prop1, prop2, prop3, prop4, prop5)
names    <- c(rep(name1, times = length(k)), rep(name2, times = length(k)), rep(name3, times = length(k)), rep(name4, times = length(k)), rep(name5, times = length(k))    )
sparsity <- rep(k,times = 5)
#--------------------------------------
df       <- data.frame("fraction"= estim, sparsity, names)
#--------------------------------------
p <- ggplot(df, aes(sparsity, fraction, colour= names, fill = names))
p <- p + geom_line(mapping = aes(x = sparsity, y = fraction, color = names), size = 1, linetype = 1, cex=1)
p <- p + geom_point(df, mapping=aes(x = sparsity, y = fraction, shape = names), size = 5)
#p <- p + scale_color_manual(values=c("red", "blue"))
p <- p + scale_color_manual(values=c("red", "blue", "chartreuse3", "darkgoldenrod3", "blueviolet"))
p <- p + scale_shape_manual(values = c(21 ,22 ,23 ,24 ,25 ))
p <- p + scale_fill_manual(values = c("red", "blue", "chartreuse3", "darkgoldenrod3", "blueviolet"))
p <- p + coord_cartesian( xlim = c(k[1],  k[length(k)]),  ylim = c(0, 0.42) )
p <- p + labs(title="", x = 'Number of relevant groups', y = 'Fraction of groups in STRG')
p <- p + theme_bw(base_size = 35)
p <- p + theme( legend.position = c(.97, .97), legend.justification = c("right", "top"), legend.box.background = element_rect())
p <- p + theme(legend.text=element_text(size=25))
p <- p + theme(legend.title = element_blank())
p <- p + theme(legend.key.size =  unit(.4, "in"))
p <- p + theme(legend.key = element_rect(size = 10))#, legend.key.size = unit(1.5, 'lines'))
#p <- p + theme(plot.background = element_rect(fill = 'grey98', colour = 'black'))
p <- p + theme(legend.background = element_rect(colour = 'black'))
# Chunk 5: figure2b
plot(p)
print("a")
# Chunk 6: cc
setwd(path3)
PROP   <- read.table("PROP_TRUE_01_MEAN_WEAK.txt");
prop1  <- PROP[,1];
prop2  <- PROP[,2];
prop3  <- PROP[,3];
prop4  <- PROP[,4];
prop5  <- PROP[,5];
estim    <- c(prop1, prop2, prop3, prop4, prop5)
names    <- c(rep(name1, times = length(k)), rep(name2, times = length(k)), rep(name3, times = length(k)), rep(name4, times = length(k)), rep(name5, times = length(k))    )
sparsity <- rep(k,times = 5)
#--------------------------------------
df       <- data.frame("fraction"= estim, sparsity, names)
#--------------------------------------
p <- ggplot(df, aes(sparsity, fraction, colour= names, fill = names))
p <- p + geom_line(mapping = aes(x = sparsity, y = fraction, color = names), size = 1, linetype = 1, cex=1)
p <- p + geom_point(df, mapping=aes(x = sparsity, y = fraction, shape = names), size = 5)
#p <- p + scale_color_manual(values=c("red", "blue"))
p <- p + scale_color_manual(values=c("red", "blue", "chartreuse3", "darkgoldenrod3", "blueviolet"))
p <- p + scale_shape_manual(values = c(21 ,22 ,23 ,24 ,25 ))
p <- p + scale_fill_manual(values = c("red", "blue", "chartreuse3", "darkgoldenrod3", "blueviolet"))
p <- p + coord_cartesian( xlim = c(k[1],  k[length(k)]),  ylim = c(0, 0.42) )
p <- p + labs(title="", x = 'Number of relevant groups', y = 'Fraction of groups in STRG')
p <- p + theme_bw(base_size = 35)
p <- p + theme( legend.position = c(.97, .97), legend.justification = c("right", "top"), legend.box.background = element_rect())
p <- p + theme(legend.text=element_text(size=25))
p <- p + theme(legend.title = element_blank())
p <- p + theme(legend.key.size =  unit(.4, "in"))
p <- p + theme(legend.key = element_rect(size = 10))#, legend.key.size = unit(1.5, 'lines'))
#p <- p + theme(plot.background = element_rect(fill = 'grey98', colour = 'black'))
p <- p + theme(legend.background = element_rect(colour = 'black'))
# Chunk 7: figure2c
plot(p)
print("a")
# Chunk 8: copy
file.copy('D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\Figures\\Rscripts\\Figures2_files\\figure-html\\figure2a-1.pdf','D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\JASA_REVISION\\', overwrite = TRUE)
file.copy('D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\Figures\\Rscripts\\Figures2_files\\figure-html\\figure2b-1.pdf','D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\JASA_REVISION\\', overwrite = TRUE)
file.copy('D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\Figures\\Rscripts\\Figures2_files\\figure-html\\figure2c-1.pdf','D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\JASA_REVISION\\', overwrite = TRUE)
---
title: "Plots"
output:
html_document:
toc: yes
pdf_document:
toc: yes
---
```{r settings, echo=F, message=F, results='hide', warning = F, eval = T}
rm(list=ls())
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, message = FALSE, warning = FALSE, cache = TRUE, fig = TRUE, global.par = TRUE, dev = 'pdf')
#, dev = 'pdf'
options(width  = 100)
options(scipen = 999)
# Load libraries
library(data.table)
library(ggplot2)
library(reshape2)
library(dplyr)
library(GGally)
library(PerformanceAnalytics)
library(mlbench)
library(caret)
library(glmnet)
library(Hmisc)
library(randomForest)
library(discretization)
# Make sure functions from dplyr are acting as functions from dplyr
filter    <- dplyr::filter
mutate    <- dplyr::mutate
group_by  <- dplyr::group_by
summarize <- dplyr::summarize
select    <- dplyr::select
# Define project directory path
```
```{r aa, echo=F, message=F, results='hide', warning = F, cache = F}
#############################################################################################
library(Hmisc)
library(dplyr)
library(ggplot2)
#------------------------------------------------------------------------------------
path1 <- "D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\Figures\\Figure2\\Data_a\\";
path2 <- "D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\Figures\\Figure2\\Data_b\\";
path3 <- "D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\Figures\\Figure2\\Data_c\\";
k     <- matrix(c(3, 25, 50, 75, 100, 125, 150, 175, 200, 225, 250), 11, 1);
yMAX  <- 0.4;
iter  <- 300;
name1 <- "3-el. groups"
name2 <- "4-el. groups"
name3 <- "5-el. groups"
name4 <- "6-el. groups"
name5 <- "7-el. groups"
col1  <- "tomato2";
col2  <- "blue";
col3  <- "darkgreen";
col4  <- "black";
col5  <- "orange";
setwd(path1)
PROP   <- read.table("PROP_TRUE_01_MEAN_WEAK.txt");
prop1  <- PROP[,1];
prop2  <- PROP[,2];
prop3  <- PROP[,3];
prop4  <- PROP[,4];
prop5  <- PROP[,5];
estim    <- c(prop1, prop2, prop3, prop4, prop5)
names    <- c(rep(name1, times = length(k)), rep(name2, times = length(k)), rep(name3, times = length(k)), rep(name4, times = length(k)), rep(name5, times = length(k))    )
sparsity <- rep(k,times = 5)
#--------------------------------------
df       <- data.frame("fraction"= estim, sparsity, names)
#--------------------------------------
levels(df$names)
---
title: "Plots"
output:
html_document:
toc: yes
pdf_document:
toc: yes
---
```{r settings, echo=F, message=F, results='hide', warning = F, eval = T}
rm(list=ls())
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, message = FALSE, warning = FALSE, cache = TRUE, fig = TRUE, global.par = TRUE, dev = 'pdf')
#, dev = 'pdf'
options(width  = 100)
options(scipen = 999)
# Load libraries
library(data.table)
library(ggplot2)
library(reshape2)
library(dplyr)
library(GGally)
library(PerformanceAnalytics)
library(mlbench)
library(caret)
library(glmnet)
library(Hmisc)
library(randomForest)
library(discretization)
# Make sure functions from dplyr are acting as functions from dplyr
filter    <- dplyr::filter
mutate    <- dplyr::mutate
group_by  <- dplyr::group_by
summarize <- dplyr::summarize
select    <- dplyr::select
# Define project directory path
```
```{r aa, echo=F, message=F, results='hide', warning = F, cache = F}
#setwd('D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\Figures\\Figure1\\data')
#############################################################################################
library(Hmisc)
library(dplyr)
library(ggplot2)
#------------------------------------------------------------------------------------
k     <- matrix(c(3, 10, 20, 30, 40, 50, 60), 7, 1);
yMAX  <- 0.75;
iter  <- 200;
q1    <- 0.1;
name1 <- expression(paste("gSLOPE, q=0.1"))
name2 <- expression(paste("gLASSO,  ", lambda," =", lambda^"mean","(1)"))
name3<- expression(paste("gLASSO with cv"))
pch1  <- 17;
pch2  <- 15;
pch3  <- 16;
col1  <-  "blue";
col2  <- "green4";
col3  <- "red";
names  = c(name1, name2, name3);
colors = c(col1, col2, col3);
pchs   = c(pch1, pch2, pch3);
#----------------------------------------------
setwd('D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\Figures\\Figure3\\data\\')
fdr1  <- read.table("FDR_01.txt");
al1   <- as.numeric(fdr1);
al1   <- as.matrix(al1);
fdr1  <- al1;
s1    <- read.table("stdFDR_01.txt");
sl1   <- as.numeric(s1);
sl1   <- as.matrix(sl1);
sfdr1 <- sl1/sqrt(iter);
fdr2  <- read.table("gFDR_gLASSO_LM_01.txt");
al2   <- as.numeric(fdr2);
al2   <- as.matrix(al2);
fdr2  <- al2;
s2    <- read.table("std_gFDR_gLASSO_LM_01.txt");
sl2   <- as.numeric(s2);
sl2   <- as.matrix(sl2);
sfdr2 <- sl2/sqrt(iter);
fdr3  <- read.table("gFDR_gLASSO_CV.txt", fill = TRUE);
fdr3  <- c(unlist(fdr3[1,]), unlist(fdr3[2,1:2]));
al3   <- as.numeric(fdr3);
al3   <- as.matrix(al3);
fdr3  <- al3;
s3    <- read.table("stdgFDR_gLASSO_CV.txt", fill = TRUE);
s3    <- c(unlist(s3[1,]), unlist(s3[2,1:2]));
sl3   <- as.numeric(s3);
sl3   <- as.matrix(sl3);
sfdr3 <- sl3/sqrt(iter);
pwr1  <- read.table("POWER_01.txt");
al1   <- as.numeric(pwr1);
al1   <- as.matrix(al1);
pwr1  <- al1;
s1    <- read.table("stdPOWER_01.txt");
sl1   <- as.numeric(s1);
sl1   <- as.matrix(sl1);
spwr1 <- sl1/sqrt(iter);
pwr2  <- read.table("POWER_gLASSO_LM_01.txt");
al2   <- as.numeric(pwr2);
al2   <- as.matrix(al2);
pwr2  <- al2;
s2    <- read.table("std_POWER_gLASSO_LM_01.txt");
sl2   <- as.numeric(s2);
sl2   <- as.matrix(sl2);
spwr2 <- sl2/sqrt(iter);
pwr3  <- read.table("POWER_gLASSO_CV.txt", fill = TRUE);
pwr3  <- c(unlist(pwr3[1,]), unlist(pwr3[2,1:2]));
al3   <- as.numeric(pwr3);
al3   <- as.matrix(al3);
pwr3  <- al3;
s3    <- read.table("stdPOWER_gLASSO_CV.txt", fill = TRUE);
s3    <- c(unlist(s3[1,]), unlist(s3[2,1:2]));
sl3   <- as.numeric(s3);
sl3   <- as.matrix(sl3);
spwr3 <- sl3/sqrt(iter);
#------------------------------------------------------------------------------------
#setwd('C:\\Users\\dbrzyski\\Dropbox\\GroupSlopeArticleMy\\Manuscript\\Figures')
#setwd('D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticleMy\\Manuscript\\Figures')
#=======================================================================
gfdrs       <-  rbind(fdr1, fdr2, fdr3)
pwrs        <-  rbind(pwr1, pwr2, pwr3)
gfdr_se     <-  rbind(sfdr1, sfdr2, sfdr3)
pwr_se      <-  rbind(spwr1, spwr2, spwr3)
lower_gfdr  <-  gfdrs - 2*gfdr_se
upper_gfdr  <-  gfdrs + 2*gfdr_se
lower_pwr   <-  pwrs - 2*pwr_se
upper_pwr   <-  pwrs + 2*pwr_se
row.names(gfdrs)       <- NULL
row.names(pwrs)        <- NULL
row.names(gfdr_se)     <- NULL
row.names(pwr_se)      <- NULL
row.names(lower_gfdr)  <- NULL
row.names(upper_gfdr)  <- NULL
row.names(lower_pwr)   <- NULL
row.names(upper_pwr)   <- NULL
names    <- c(rep("A", times = length(k)), rep("B", times = length(k)), rep("C", times = length(k)))
sparsity <- rep(k,times = 3)
#--------------------------------------
df       <- data.frame("gFDR"= gfdrs, "lower_gfdr"=lower_gfdr, "upper_gfdr"=upper_gfdr, "pwr"= pwrs, "lower_pwr"=lower_pwr, "upper_pwr"=upper_pwr, sparsity, names)
levels(df$names)
---
title: "Plots"
output:
html_document:
toc: yes
pdf_document:
toc: yes
---
```{r settings, echo=F, message=F, results='hide', warning = F, eval = T}
rm(list=ls())
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, message = FALSE, warning = FALSE, cache = TRUE, fig = TRUE, global.par = TRUE, dev = 'pdf')
#, dev = 'pdf'
options(width  = 100)
options(scipen = 999)
# Load libraries
library(data.table)
library(ggplot2)
library(reshape2)
library(dplyr)
library(GGally)
library(PerformanceAnalytics)
library(mlbench)
library(caret)
library(glmnet)
library(Hmisc)
library(randomForest)
library(discretization)
# Make sure functions from dplyr are acting as functions from dplyr
filter    <- dplyr::filter
mutate    <- dplyr::mutate
group_by  <- dplyr::group_by
summarize <- dplyr::summarize
select    <- dplyr::select
# Define project directory path
```
```{r aa, echo=F, message=F, results='hide', warning = F, cache = F}
#setwd('D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\Figures\\Figure4\\data')
#############################################################################################
library(Hmisc)
library(dplyr)
library(ggplot2)
#------------------------------------------------------------------------------------
k      <- c(1,20,40,60,80);
k      <- k[5:1];
iter   <- 100;
yMAX   <- 0.15;
q1     <- 0.05;
q2     <- 0.1;
name1  <- "q = 0.05"
name2  <- "q = 0.1"
pch1   <- 16;
pch2   <- 17;
lty0   <- 1;
lty1   <- 2;
lty2   <- 2;
color0 <- "black";
col1   <- "red";
col2   <- "blue";
#------------------------------------------------------------------------------------
setwd("D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\Figures\\Figure4\\data\\FinalResults")
fdr_gSLOPE       <- t(read.table("fdr_gSLOPE.txt"))
fdr_SLOPE_X      <- t(read.table("fdr_SLOPE_X.txt"))
fdr_SLOPE_XZ     <- t(read.table("fdr_SLOPE_XZ.txt"))
power_gSLOPE     <- t(read.table("power_gSLOPE.txt"))
power_SLOPE_X    <- t(read.table("power_SLOPE_X.txt"))
power_SLOPE_XZ   <- t(read.table("power_SLOPE_XZ.txt"))
sfdr_gSLOPE      <- t(read.table("sfdr_gSLOPE.txt"))
sfdr_SLOPE_X     <- t(read.table("sfdr_SLOPE_X.txt"))
sfdr_SLOPE_XZ    <- t(read.table("sfdr_SLOPE_XZ.txt"))
spower_gSLOPE    <- t(read.table("spower_gSLOPE.txt"))
spower_SLOPE_X   <- t(read.table("spower_SLOPE_X.txt"))
spower_SLOPE_XZ  <- t(read.table("spower_SLOPE_XZ.txt"))
sfdr_gSLOPE      <- sfdr_gSLOPE/sqrt(iter)
sfdr_SLOPE_X     <- sfdr_SLOPE_X/sqrt(iter)
sfdr_SLOPE_XZ    <- sfdr_SLOPE_XZ/sqrt(iter)
spower_gSLOPE    <- spower_gSLOPE/sqrt(iter)
spower_SLOPE_X   <- spower_SLOPE_X/sqrt(iter)
spower_SLOPE_XZ  <- spower_SLOPE_XZ/sqrt(iter)
#------------------------------------------------------------------------------------
setwd("D:\\users\\dbrzyski\\Dropbox\\GroupSlopeArticle\\Figures\\Figure4\\data\\FinalResults_ADD")
fdr_gSLOPE_ADD       <- t(read.table("fdr_gSLOPE.txt"))
fdr_SLOPE_X_ADD      <- t(read.table("fdr_SLOPE_X.txt"))
fdr_SLOPE_XZ_ADD     <- t(read.table("fdr_SLOPE_XZ.txt"))
power_gSLOPE_ADD     <- t(read.table("power_gSLOPE.txt"))
power_SLOPE_X_ADD    <- t(read.table("power_SLOPE_X.txt"))
power_SLOPE_XZ_ADD   <- t(read.table("power_SLOPE_XZ.txt"))
sfdr_gSLOPE_ADD      <- t(read.table("sfdr_gSLOPE.txt"))
sfdr_SLOPE_X_ADD     <- t(read.table("sfdr_SLOPE_X.txt"))
sfdr_SLOPE_XZ_ADD    <- t(read.table("sfdr_SLOPE_XZ.txt"))
spower_gSLOPE_ADD    <- t(read.table("spower_gSLOPE.txt"))
spower_SLOPE_X_ADD   <- t(read.table("spower_SLOPE_X.txt"))
spower_SLOPE_XZ_ADD  <- t(read.table("spower_SLOPE_XZ.txt"))
sfdr_gSLOPE_ADD      <- sfdr_gSLOPE_ADD/sqrt(iter)
sfdr_SLOPE_X_ADD     <- sfdr_SLOPE_X_ADD/sqrt(iter)
sfdr_SLOPE_XZ_ADD    <- sfdr_SLOPE_XZ_ADD/sqrt(iter)
spower_gSLOPE_ADD    <- spower_gSLOPE_ADD/sqrt(iter)
spower_SLOPE_X_ADD   <- spower_SLOPE_X_ADD/sqrt(iter)
spower_SLOPE_XZ_ADD  <- spower_SLOPE_XZ_ADD/sqrt(iter)
#------------------------------------------------------------------------------------
#additive, fdr
estim     <- rbind(fdr_gSLOPE_ADD, fdr_SLOPE_X_ADD, fdr_SLOPE_XZ_ADD)
se        <- rbind(sfdr_gSLOPE_ADD, sfdr_SLOPE_X_ADD, sfdr_SLOPE_XZ_ADD)
lower     <- estim - 2*se
upper     <- estim + 2*se
names     <- c(rep("fdr_gSLOPE", times = length(k)), rep("fdr_gSLOPE_X", times = length(k)), rep("fdr_gSLOPE_XZ", times = length(k)))
sparsity  <- rep(k, times = 3)
df1       <- data.frame("gFDR"= estim, "lower"=lower, "upper"=upper, sparsity, names, row.names=NULL)
levels(df1$names)
#------------------------------------------------------------------------------------
#additive, power
estim     <- rbind(power_gSLOPE_ADD, power_SLOPE_X_ADD, power_SLOPE_XZ_ADD)
se        <- rbind(spower_gSLOPE_ADD, spower_SLOPE_X_ADD, spower_SLOPE_XZ_ADD)
lower     <- estim - 2*se
upper     <- estim + 2*se
names     <- c(rep("power_gSLOPE", times = length(k)), rep("power_gSLOPE_X", times = length(k)), rep("power_gSLOPE_XZ", times = length(k)))
sparsity  <- rep(k, times = 3)
df2       <- data.frame("gFDR"= estim, "lower"=lower, "upper"=upper, sparsity, names, row.names=NULL)
#------------------------------------------------------------------------------------
#dominance, fdr
estim     <- rbind(fdr_gSLOPE, fdr_SLOPE_X, fdr_SLOPE_XZ)
se        <- rbind(sfdr_gSLOPE, sfdr_SLOPE_X, sfdr_SLOPE_XZ)
lower     <- estim - 2*se
upper     <- estim + 2*se
names     <- c(rep("fdr_gSLOPE", times = length(k)), rep("fdr_gSLOPE_X", times = length(k)), rep("fdr_gSLOPE_XZ", times = length(k)))
sparsity  <- rep(k, times = 3)
df3       <- data.frame("gFDR"= estim, "lower"=lower, "upper"=upper, sparsity, names, row.names=NULL)
#------------------------------------------------------------------------------------
#dominance, power
estim     <- rbind(power_gSLOPE, power_SLOPE_X, power_SLOPE_XZ)
se        <- rbind(spower_gSLOPE, spower_SLOPE_X, spower_SLOPE_XZ)
lower     <- estim - 2*se
upper     <- estim + 2*se
names     <- c(rep("power_gSLOPE", times = length(k)), rep("power_gSLOPE_X", times = length(k)), rep("power_gSLOPE_XZ", times = length(k)))
sparsity  <- rep(k, times = 3)
df4       <- data.frame("gFDR"= estim, "lower"=lower, "upper"=upper, sparsity, names, row.names=NULL)
levels(df1$names2)
levels(df2$names)
levels(df3$names)
levels(df4$names)
